package io.hypersistence.utils.hibernate.query;

import io.hypersistence.utils.hibernate.util.ReflectionUtils;
import jakarta.persistence.Query;
import org.hibernate.query.spi.DomainQueryExecutionContext;
import org.hibernate.query.spi.QueryImplementor;
import org.hibernate.query.spi.QueryInterpretationCache;
import org.hibernate.query.spi.SelectQueryPlan;
import org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan;
import org.hibernate.query.sqm.internal.DomainParameterXref;
import org.hibernate.query.sqm.internal.QuerySqmImpl;
import org.hibernate.query.sqm.internal.SqmInterpretationsKey;
import org.hibernate.query.sqm.tree.select.SqmSelectStatement;
import org.hibernate.sql.exec.spi.JdbcOperationQuerySelect;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.util.function.Supplier;

/**
 * The {@link SQLExtractor} allows you to extract the
 * underlying SQL query generated by a JPQL or JPA Criteria API query.
 * <p>
 * For more details about how to use it, check out <a href="https://vladmihalcea.com/get-sql-from-jpql-or-criteria/">this article</a> on <a href="https://vladmihalcea.com/">vladmihalcea.com</a>.
 *
 * @author Vlad Mihalcea
 * @since 2.9.11
 */
public class SQLExtractor {

    protected SQLExtractor() {
    }

    /**
     * Get the underlying SQL generated by the provided JPA query.
     *
     * @param query JPA query
     * @return the underlying SQL generated by the provided JPA query
     */
    public static String from(Query query) {
        Query hibernateQuery = getHibernateQuery(query);
        if (hibernateQuery instanceof SqmInterpretationsKey.InterpretationsKeySource &&
            hibernateQuery instanceof QueryImplementor &&
            hibernateQuery instanceof QuerySqmImpl) {
            QueryInterpretationCache.Key cacheKey = SqmInterpretationsKey.createInterpretationsKey((SqmInterpretationsKey.InterpretationsKeySource) hibernateQuery);
            QuerySqmImpl querySqm = (QuerySqmImpl) hibernateQuery;
            Supplier buildSelectQueryPlan = () -> ReflectionUtils.invokeMethod(querySqm, "buildSelectQueryPlan");
            SelectQueryPlan plan = cacheKey != null ? ((QueryImplementor) hibernateQuery).getSession().getFactory().getQueryEngine()
                .getInterpretationCache()
                .resolveSelectQueryPlan(cacheKey, buildSelectQueryPlan) :
                (SelectQueryPlan) buildSelectQueryPlan.get();
            if (plan instanceof ConcreteSqmSelectQueryPlan) {
                ConcreteSqmSelectQueryPlan selectQueryPlan = (ConcreteSqmSelectQueryPlan) plan;
                Object cacheableSqmInterpretation = ReflectionUtils.getFieldValueOrNull(selectQueryPlan, "cacheableSqmInterpretation");
                if (cacheableSqmInterpretation == null) {
                    DomainQueryExecutionContext domainQueryExecutionContext = DomainQueryExecutionContext.class.cast(querySqm);
                    cacheableSqmInterpretation = ReflectionUtils.invokeStaticMethod(
                        ReflectionUtils.getMethod(
                            ConcreteSqmSelectQueryPlan.class,
                            "buildCacheableSqmInterpretation",
                            SqmSelectStatement.class,
                            DomainParameterXref.class,
                            DomainQueryExecutionContext.class
                        ),
                        ReflectionUtils.getFieldValueOrNull(selectQueryPlan, "sqm"),
                        ReflectionUtils.getFieldValueOrNull(selectQueryPlan, "domainParameterXref"),
                        domainQueryExecutionContext
                    );
                }
                if (cacheableSqmInterpretation != null) {
                    JdbcOperationQuerySelect jdbcSelect = ReflectionUtils.getFieldValueOrNull(cacheableSqmInterpretation, "jdbcSelect");
                    if (jdbcSelect != null) {
                        return jdbcSelect.getSqlString();
                    }
                }
            }
        }
        return ReflectionUtils.invokeMethod(hibernateQuery, "getQueryString");
    }

    /**
     * Get the unproxied hibernate query underlying the provided query object.
     *
     * @param query JPA query
     * @return the unproxied Hibernate query, or original query
     */
    private static Query getHibernateQuery(Query query) {
        try {
            if (query instanceof QuerySqmImpl || !Proxy.isProxyClass(query.getClass())) {
                return query;
            }
            // is proxyied, get it out
            InvocationHandler invocationHandler = Proxy.getInvocationHandler(query);
            Class<?> innerClass = invocationHandler.getClass();
            Field targetField = innerClass.getDeclaredField("target");
            targetField.setAccessible(true);
            return (Query) targetField.get(invocationHandler);
        } catch (NoSuchFieldException exception) {
            return query; // seems it cannot extract it, probably not a hibernate proxy
        } catch (IllegalAccessException exception) {
            throw new RuntimeException(exception);
        }
    }
}
